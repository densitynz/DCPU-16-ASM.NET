; minecraft.dasm16
; v1.0
; Created by Pseudox/trevs231

    SET PC, main_inits



;Program start -------------------------------
:main_inits


    SET C, [KBRD_BUFFER];clearing keyboard buffer
    SET [c], 0

 ;Main loop-----------------------
:main
    JSR MINECRAFT_init

:EXIT


    SET J, 0x40
:crash
    SET PC, crash
; end of main section-----------------


;********************************************************
;COPY CODE BELOW into your OS AND CALL 'JSR MINECRAFT_init'
;vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

;Static Variables and data-------------------------
;        (this is in my main code, but you will
;        need it for the program to run)
:SCRN_START DAT 0x8000 ;first screen location
:SCRN_END DAT 0x81FF  ;last screen location

:KBRD_BUFFER DAT 0x9000  ;where inputs are read from keyboard



;MINECRAFT GAME FOR DCPU-16 v1.0 by Pseudox/trevs231

;A= nothing
;B= prevents other buttons from messing up input
;C= falling counter
;X= helper
;Y= are you placing or removing?
;Z= input buffer
;I= iterator
;J= helper


:MC_PLAYER_POS dat 0x1
:MC_SKY_CHAR DAT 0x0B00
:MC_GROUND_CHAR DAT 0x862A
:MC_PLAYER_CHAR DAT 0x1058

:MC_FALL_TIME DAT 0x0500

:MC_up_key DAT 0x0003    ;up arrow
:MC_left_key DAT 0x0001    ;left arrow
:MC_right_key DAT 0x0002   ;right arrow

:MC_do_up_key DAT 0x0077    ;w
:MC_do_down_key DAT 0x0073 ;s
:MC_do_left_key DAT 0x0061    ;a
:MC_do_right_key DAT 0x0064   ;d

:MC_reset_key DAT 0x0072 ;r
:MC_quit_key DAT 0x0070 ;p





:MINECRAFT_init
    SET PUSH, B
    SET PUSH, C
    SET PUSH, X
    SET PUSH, Y
    SET PUSH, Z
    SET PUSH, I
    SET PUSH, J

:MC_reset_point
    SET z, [KBRD_BUFFER] ;initialize input buffer
    SET [z], 0

    SET x, [SCRN_START]
    SET C, [MC_FALL_TIME]
    SET J, x
    ADD j, 0x100
:MINECRAFT_init_loop1
    SET [x], [MC_SKY_CHAR]
    ADD x, 1
    IFG j, x
        SET PC, MINECRAFT_init_loop1

    SET J, [SCRN_END]
    ADD j, 1
:MINECRAFT_init_loop2
    SET [x], [MC_GROUND_CHAR]
    ADD x, 1
    IFG j, x
        SET PC, MINECRAFT_init_loop2

     ;initialize player
    SET [MC_PLAYER_POS], [SCRN_START]
    ADD [MC_PLAYER_POS], 0xF0

    JSR MC_print_player

    SET B, 0x100


:MC_game_loop
    JSR MC_in_air_check

    IFE [z],  [MC_up_key]
        JSR MC_jump
    IFE [z], [MC_left_key]
        JSR MC_move_left
    IFE [z], [MC_right_key]
        JSR MC_move_right

    IFE [z], [MC_do_up_key]
        JSR MC_do_up
    IFE [z], [MC_do_down_key]
        JSR MC_do_down
    IFE [z], [MC_do_left_key]
        JSR MC_do_left
    IFE [z], [MC_do_right_key]
        JSR MC_do_right

    IFE [z], [MC_reset_key]
        SET PC, MC_reset_game

    IFE [z], [MC_quit_key]
        SET PC, MC_game_exit

    SUB B, 1
    IFE B, 0
        JSR MC_reset_input

    SET PC, MC_game_loop

:MC_game_exit
    SET [z], 0
    SET J, POP
    SET I, POP
    SET Z, POP
    SET Y, POP
    SET X, POP
    SET C, POP
    SET B, POP
    SET PC, POP


:MC_reset_input   ;prevents input buffer from getting full
    SET [z], 0     ;while preventing issues with input
    SET B, 0x100
    SET PC, POP




:MC_jump
    SET [z], 0
    IFG [MC_FALL_TIME], C   ;can't if in the air
        SET PC, POP
    SET J, [MC_PLAYER_POS]
    SET X, [MC_PLAYER_POS]
    SUB J, 0x20
    IFG [SCRN_START], j       ;at the top?
        SET PC, POP
    IFE [j], [MC_GROUND_CHAR]  ;ground above?
        SET PC, POP
    SET [X], [MC_SKY_CHAR]
    SET [MC_PLAYER_POS], j
    JSR MC_print_player
    SUB C, 1
    SET PC, POP


:MC_move_left
    SET [z], 0
    SET j, [MC_PLAYER_POS]
    MOD j, 0x20
    IFE j, 0
        SET PC, MC_wrap_left       ;at left edge?

    SET J, [MC_PLAYER_POS]
    SUB j, 1
    IFE [j], [MC_GROUND_CHAR]      ;ground there?
        SET PC, POP

    SET j, [MC_PLAYER_POS]
    SET [j], [MC_SKY_CHAR]
    SUB [MC_PLAYER_POS], 1
    JSR MC_print_player
    SET PC, POP

:MC_wrap_left
    SET J, [MC_PLAYER_POS]
    ADD J, 0x1F
    IFE [j], [MC_GROUND_CHAR]       ;ground there?
        SET PC, POP
    SET X, [MC_PLAYER_POS]
    SET [x], [MC_SKY_CHAR]
    SET [MC_PLAYER_POS], j
    JSR MC_print_player
    SET PC, POP

:MC_move_right
    SET [z], 0
    SET j, [MC_PLAYER_POS]
    MOD j, 0x20
    IFE j, 0x1F                      ;at right edge?
        SET PC, MC_wrap_right

    SET J, [MC_PLAYER_POS]
    ADD j, 1
    IFE [j], [MC_GROUND_CHAR]     ;ground there?
        SET PC, POP

    SET j, [MC_PLAYER_POS]
    SET [j], [MC_SKY_CHAR]
    ADD [MC_PLAYER_POS], 1
    JSR MC_print_player
    SET PC, POP


:MC_wrap_right
    SET J, [MC_PLAYER_POS]
    SUB J, 0x1F
    IFE [J], [MC_GROUND_CHAR]       ;ground there?
        SET PC, POP
    SET X, [MC_PLAYER_POS]
    SET [x], [MC_SKY_CHAR]
    SET [MC_PLAYER_POS], j
    JSR MC_print_player
    SET PC, POP

:MC_do_up
    SET [z], 0
    SET J, [MC_PLAYER_POS]
    SUB J, 0x20
    IFG [SCRN_START], j       ;at the top?
        SET PC, POP

    IFE [j], [MC_GROUND_CHAR]      ;is it ground?
        SET PC, MC_do_is_ground
    SET [j], [MC_GROUND_CHAR]

    SET PC, POP

:MC_do_down
    SET [z], 0
    SET J, [MC_PLAYER_POS]
    ADD J, 0x20
    IFG J, [SCRN_END]      ;at the bottom?
        SET PC, POP

    IFE [j], [MC_GROUND_CHAR]      ;is it ground?
        SET PC, MC_do_is_ground
    SET [j], [MC_GROUND_CHAR]

    SET PC, POP

:MC_do_left
    SET [z], 0
    SET j, [MC_PLAYER_POS]
    MOD j, 0x20
    IFE j, 0x0                      ;at left edge?
        SET PC, MC_do_wrap_left

    SET J, [MC_PLAYER_POS]
    SUB j, 1
    IFE [j], [MC_GROUND_CHAR]     ;ground there?
        SET PC, MC_do_is_ground
    SET [j], [MC_GROUND_CHAR]

    SET PC, POP


:MC_do_wrap_left
    SET J, [MC_PLAYER_POS]
    ADD J, 0x1F

    IFE [J], [MC_GROUND_CHAR]       ;ground there?
        SET PC, MC_do_is_ground
    SET [j], [MC_GROUND_CHAR]

    SET PC, POP


:MC_do_right
    SET [z], 0
    SET j, [MC_PLAYER_POS]
    MOD j, 0x20
    IFE j, 0x1F                      ;at right edge?
        SET PC, MC_do_wrap_right

    SET J, [MC_PLAYER_POS]
    ADD j, 1
    IFE [j], [MC_GROUND_CHAR]     ;ground there?
        SET PC, MC_do_is_ground
    SET [j], [MC_GROUND_CHAR]

    SET PC, POP


:MC_do_wrap_right
    SET J, [MC_PLAYER_POS]
    SUB J, 0x1F

    IFE [J], [MC_GROUND_CHAR]       ;ground there?
        SET PC, MC_do_is_ground
    SET [j], [MC_GROUND_CHAR]

    SET PC, POP

:MC_do_is_ground
    SET [j], [MC_SKY_CHAR]

    SET PC, POP

:MC_reset_game
    SET [z], 0
    SET PC, MC_reset_point

:MC_in_air_check
    SET X, [MC_PLAYER_POS]
    ADD X, 0x20
    IFE [x], [MC_GROUND_CHAR]    ;ground below?
        SET PC, MC_in_air_check_on_ground
    IFG x, [SCRN_END]            ;at bottom?
        SET PC, POP
    SUB C, 1
    IFN C, 0                      ;time up?
        SET PC, POP
;dont put anything here
:MC_fall
    SET x, [MC_PLAYER_POS]
    SET [x], [MC_SKY_CHAR]
    ADD [MC_PLAYER_POS], 0x20
    SET C, [MC_FALL_TIME]
    JSR MC_print_player
    SET PC, POP

 :MC_in_air_check_on_ground
    SET C, [MC_FALL_TIME]
    SET PC, POP



:MC_print_player
    SET X, [MC_PLAYER_POS]
    SET j, [MC_SKY_CHAR]
    BOR j, [MC_PLAYER_CHAR]
    SET [x], j
    SET PC, POP
